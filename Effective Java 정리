1. 생성자 대신 정적 팩터리 메서드를 고려하라
    - 이름을 가질 수 있다
    - 인스턴스 생성을 통제할 수 있다
    - 반환타입의 하위타입 객체를 반환할 수 있다
    - 입력 매개변수에 따라 다른 클래스의 객체를 반환할 수 있다
2. 생성자에 매개변수가 많다면 빌더를 고려하라
    - 생성자나 정적 팩터리가 처리해야 할 매개변수가 많다면, 빌더 패턴으로 선택하는 게 더 낫다
    - 매개변수 중 다수가 필수가 아니거나 같은 타입이면 특히 더 그렇다
3. private 생성자나 열거 타입으로 싱글턴임을 보장하라
4. 인스턴스화를 막으려거든 private 생성자를 사용하라
5. 자원을 직접 명시하지 말고 의존 객체 주입을 사용하라
    - 클래스가 내부적으로 하나 이상의 자원에 의존하고, 그 자원이 클래스 동작에 영향을 준다면 싱글턴과 정적 유틸리티 클래스는 사용하지 않는 것이 좋다
    - 이 자원들을 직접 만들게 해서도 안 된다
    - 대신 필요한 자원을 (혹은 그 자원을 만드는 팩터리를) 생성자에 (혹은 정적 팩터리나 빌더에) 넘겨주자
6. 불필요한 객체 생성을 피하라
7. 다 쓴 객체 참조를 해제하라
8. finalizer와 cleaner 사용을 피하라
