객체 생성과 파괴
    생성자 대신 정적 팩터리 메서드를 고려하라
        - 이름을 가질 수 있다
        - 인스턴스 생성을 통제할 수 있다
        - 반환타입의 하위타입 객체를 반환할 수 있다
        - 입력 매개변수에 따라 다른 클래스의 객체를 반환할 수 있다
    생성자에 매개변수가 많다면 빌더를 고려하라
        - 생성자나 정적 팩터리가 처리해야 할 매개변수가 많다면, 빌더 패턴으로 선택하는 게 더 낫다
        - 매개변수 중 다수가 필수가 아니거나 같은 타입이면 특히 더 그렇다
    private 생성자나 열거 타입으로 싱글턴임을 보장하라
    인스턴스화를 막으려거든 private 생성자를 사용하라
    자원을 직접 명시하지 말고 의존 객체 주입을 사용하라
        - 클래스가 내부적으로 하나 이상의 자원에 의존하고, 그 자원이 클래스 동작에 영향을 준다면 싱글턴과 정적 유틸리티 클래스는 사용하지 않는 것이 좋다
        - 이 자원들을 직접 만들게 해서도 안 된다
        - 대신 필요한 자원을 (혹은 그 자원을 만드는 팩터리를) 생성자에 (혹은 정적 팩터리나 빌더에) 넘겨주자
    불필요한 객체 생성을 피하라
    다 쓴 객체 참조를 해제하라
    finalizer와 cleaner 사용을 피하라
    try-finally보다는 try-with-resources를 사용하라

모든 객체의 공통 메서드
    equals는 일반 규약을 지켜 재정의하라
    eqauls를 재정의하려거든 hashCode도 재정의하라
    toString을 항상 재정의하라
    clone 재정의는 주의해서 진행하라
    Comparable을 구현할지 고려하라

클래스와 인터페이스
    클래스와 멤버의 접근 권한을 최소화하라
    public 클래스에서는 public 필드가 아닌 접근자 메서드를 사용하라
    변경 가능성을 최소화하라
    상속보다는 컴포지션을 사용하라
    상속을 고려해 설계하고 문서화하라. 그러지 않았다면 상속을 금지하라
    추상 클래스보다는 인터페이스를 우선하라
    인터페이스는 구현하는 쪽을 생각해 설계하라
    인터페이스는 타입을 정의하는 용도로만 사용하라
    태그 달린 클래스보다는 클래스 계층구조를 활용하라
    멤버 클래스는 되도록 static으로 만들라
    톱레벨 클래스는 한 파일에 하나만 담으라

제네릭
    로 타입은 사용하지 말라
    비검사 경고를 제거하라
    배열보다는 리스트를 사용하라
    이왕이면 제네릭 타입으로 만들라
    이왕이면 제네릭 메서드로 만들라
    한정적 와일드카드를 사용해 API 유연성을 높이라
    제네릭과 가변인수를 함께 쓸 때는 신중하라
    타입 안전 이종 컨테이너를 고려하라

열거 타입과 애너테이션
    int 상수 대신 열거 타입을 사용하라
    ordinal 메서드 대신 인스턴스 필드를 사용하라
    비트 필드 대신 EnumSet을 사용하라
    ordinal 인덱싱 대신 EnumMap을 사용하라
    확장할 수 있는 열거 타입이 필요하면 인터페이스를 사용하라
    명명 패턴보다 애너테이션을 사용하라
    @Override 애너테이션을 일관되게 사용하라
    정의하려는 것이 타입이라면 마커 인터페이스를 사용하라

람다와 스트림
    익명 클래스보다는 람다를 사용하라
    람다보다는 메서드 참조를 사용하라
    표준 함수형 인터페이스를 사용하라
    스트림은 주의해서 사용하라
    스트림에서는 부작용 없는 함수를 사용하라
    반환 타입으로는 스트림보다 컬렉션이 낫다
    스트림 병렬화는 주의해서 적용하라

메서드
    매개변수가 유효한지 검사하라
    적시에 방어적 복사본을 만들라
    메서드 시그니처를 신중히 설계하라
    다중정의는 신중히 사용하라
    가변인수는 신중히 사용하라
    null이 아닌, 빈 컬렉션이나 배열을 반환하라
    옵셔널 반환은 신중히 하라
    공개된 API 요소에는 항상 문서화 주석을 작성하라

일반적인 프로그래밍 원칙
    지역변수의 범위를 최소화하라
    전통적인 for 문보다는 for-each 문을 사용하라
    라이브러리를 익히고 사용하라
    정확한 답이 필요하다면 float와 double은 피하라
    박싱된 기본 타입보다는 기본 타입을 사용하라
    다른 타입이 적절하다면 문자열 사용을 피하라
    문자열 연결은 느리니 주의하라
    객체는 인터페이스를 사용해 참조하라
    리플렉션보다는 인터페이스를 사용하라
    네이티브 메서드는 신중히 사용하라
    최적화는 신중히 하라
    일반적으로 통용되는 명명 규칙을 따르라

예외
    예외는 진짜 예외 상황에만 사용하라
    복구할 수 있는 상황에서는 검사 예외를, 프로그래밍 오류에는 런타입 예외를 사용하라
    필요 없는 검사 예외 사용은 피하라
    표준 예외를 사용하라
    추상화 수준에 맞는 예외를 던지라
    메서드가 던지는 모든 예외를 문서화하라
    예외의 상세 메시지에 실패 관련 정보를 담으라
    가능한 한 실패 원자적으로 만들라
    예외를 무시하지 말라



